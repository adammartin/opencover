namespace OpenCover.Test.Framework.Strategy
{
    using System;
    using System.Runtime.CompilerServices;

    using Mono.Cecil;
    using Mono.Cecil.Cil;

    using NUnit.Framework;

    using OpenCover.Framework.Strategy;

    [TestFixture]
    class LambdaAutogeneratedBranchTest
    {
        private ISkippedBranch _skipCheck;

        [SetUp]
        public void SetUp()
        {
            _skipCheck = new LambdaAutogeneratedBranch();
        }

        [Test]
        public void WillReturnFalseWhenSuppliedNull()
        {
            Assert.False(_skipCheck.IsSkipped(null));
        }

        [Test]
        public void WillReturnTrueWhenSuppliedACompilerGeneratedAttribute()
        {
            var instruction = CreatePreviousLoadFieldInstruction("wat", typeof(CompilerGeneratedAttribute));
            Assert.True(_skipCheck.IsSkipped(new InstructionData(instruction, null)));
        }

        [Test]
        public void WillReturnFalseWhenSuppliedAnInstructionWithNoAttributes()
        {
            var instruction = CreatePreviousLoadFieldInstruction("wat", null);
            Assert.False(_skipCheck.IsSkipped(new InstructionData(instruction, null)));            
        }

        [Test]
        public void WillReturnFalseWhenSuppliedAnInstructionWithNoPrevious()
        {
            var instruction = CreatePreviousLoadFieldInstruction("wat", typeof(CompilerGeneratedAttribute));
            instruction.Previous = null;
            Assert.False(_skipCheck.IsSkipped(new InstructionData(instruction, null)));
        }

        [Test]
        public void WillReturnFalseWhenSuppliedAPreviousThatIsNotAFieldDefinition()
        {
            var instruction = CreatePreviousLoadFieldInstruction("wat", typeof(CompilerGeneratedAttribute));
            instruction.Previous.OpCode = OpCodes.Call;
            instruction.Previous.Operand = new MethodDefinition("blah", MethodAttributes.Final, CreateTypeReference("some", "foo"));
            Assert.False(_skipCheck.IsSkipped(new InstructionData(instruction, null)));
        }

        private static Instruction CreatePreviousLoadFieldInstruction(string name, Type attributeType)
        {
            var previous = Instruction.Create(OpCodes.Ldsfld, CreateFieldDefinition(name, attributeType));
            var next = Instruction.Create(OpCodes.Ret);
            var instruction = Instruction.Create(OpCodes.Brtrue, next);
            instruction.Previous = previous;
            return instruction;
        }

        private static FieldDefinition CreateFieldDefinition(string name, Type attributeType)
        {
            var fieldDefinition = new FieldDefinition(name, FieldAttributes.CompilerControlled, CreateTypeReference("some", "foo"));
            if (attributeType != null)
            {
                fieldDefinition.CustomAttributes.Add(new CustomAttribute(CreateMethodReference(attributeType)));
            }
            return fieldDefinition;
        }

        private static MethodReference CreateMethodReference(Type attributeType)
        {
            return ModuleDefinition.CreateModule("Blarg", ModuleKind.Console).Import(attributeType.GetConstructor(Type.EmptyTypes));
        }

        private static TypeReference CreateTypeReference(string nameSpace, string className)
        {
            return new TypeReference(nameSpace, className, ModuleDefinition.CreateModule("Blarg", ModuleKind.Console), null);
        }
    }
}
